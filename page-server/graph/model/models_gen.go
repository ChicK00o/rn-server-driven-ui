// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"fmt"
	"io"
	"strconv"
)

type Component struct {
	Type ComponentType `json:"type"`
}

type NewPage struct {
	ID         PageType        `json:"id"`
	Components []ComponentType `json:"components"`
}

type Page struct {
	ID         PageType     `json:"id"`
	Components []*Component `json:"components"`
}

type ComponentType string

const (
	ComponentTypeText    ComponentType = "TEXT"
	ComponentTypeHeading ComponentType = "HEADING"
)

var AllComponentType = []ComponentType{
	ComponentTypeText,
	ComponentTypeHeading,
}

func (e ComponentType) IsValid() bool {
	switch e {
	case ComponentTypeText, ComponentTypeHeading:
		return true
	}
	return false
}

func (e ComponentType) String() string {
	return string(e)
}

func (e *ComponentType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = ComponentType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid ComponentType", str)
	}
	return nil
}

func (e ComponentType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type PageType string

const (
	PageTypePage1 PageType = "PAGE1"
	PageTypePage2 PageType = "PAGE2"
)

var AllPageType = []PageType{
	PageTypePage1,
	PageTypePage2,
}

func (e PageType) IsValid() bool {
	switch e {
	case PageTypePage1, PageTypePage2:
		return true
	}
	return false
}

func (e PageType) String() string {
	return string(e)
}

func (e *PageType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = PageType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid PageType", str)
	}
	return nil
}

func (e PageType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
