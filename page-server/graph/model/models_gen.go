// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"fmt"
	"io"
	"strconv"
)

type Properties interface {
	IsProperties()
}

type ButtonProperties struct {
	ButtonText  string  `json:"buttonText"`
	ButtonLabel *string `json:"buttonLabel"`
}

func (ButtonProperties) IsProperties() {}

type CardProperties struct {
	CardAlignment Alignment `json:"cardAlignment"`
}

func (CardProperties) IsProperties() {}

type Component struct {
	Type       string       `json:"type"`
	Children   []*Component `json:"children"`
	Properties Properties   `json:"properties"`
	Query      *string      `json:"query"`
}

type FormDropDownProperties struct {
	Options []string `json:"options"`
}

func (FormDropDownProperties) IsProperties() {}

type FormInputProperties struct {
	InputType InputType `json:"inputType"`
}

func (FormInputProperties) IsProperties() {}

type FormProperties struct {
	FormName *string `json:"formName"`
}

func (FormProperties) IsProperties() {}

type FormSubmitProperties struct {
	SubmitLabel string `json:"submitLabel"`
}

func (FormSubmitProperties) IsProperties() {}

type PageProperties struct {
	Name string `json:"name"`
}

func (PageProperties) IsProperties() {}

type TableProperties struct {
	TableName *string `json:"tableName"`
}

func (TableProperties) IsProperties() {}

type TextProperties struct {
	TextHeader    *string `json:"textHeader"`
	TextSubheader *string `json:"textSubheader"`
	Collapsible   *bool   `json:"collapsible"`
}

func (TextProperties) IsProperties() {}

type TickerProperties struct {
	TickerLabel *string `json:"tickerLabel"`
	TickerText  *string `json:"tickerText"`
	Frequency   int     `json:"frequency"`
}

func (TickerProperties) IsProperties() {}

type Alignment string

const (
	AlignmentVertical   Alignment = "Vertical"
	AlignmentHorizontal Alignment = "Horizontal"
)

var AllAlignment = []Alignment{
	AlignmentVertical,
	AlignmentHorizontal,
}

func (e Alignment) IsValid() bool {
	switch e {
	case AlignmentVertical, AlignmentHorizontal:
		return true
	}
	return false
}

func (e Alignment) String() string {
	return string(e)
}

func (e *Alignment) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = Alignment(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid Alignment", str)
	}
	return nil
}

func (e Alignment) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type InputType string

const (
	InputTypeText   InputType = "Text"
	InputTypeNumber InputType = "Number"
)

var AllInputType = []InputType{
	InputTypeText,
	InputTypeNumber,
}

func (e InputType) IsValid() bool {
	switch e {
	case InputTypeText, InputTypeNumber:
		return true
	}
	return false
}

func (e InputType) String() string {
	return string(e)
}

func (e *InputType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = InputType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid InputType", str)
	}
	return nil
}

func (e InputType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
